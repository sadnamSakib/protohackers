name: CI/CD Pipeline

on:
  push:
    branches:
      - develop

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/tcpserver:latest .

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/tcpserver:latest

      - name: Prepare SSH Key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key
          chmod 600 private_key

      - name: SSH into EC2 and deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/tcpserver:latest
            
            # Stop and remove the existing container, if it exists
            if [ "$(docker ps -q -f name=tcp-server)" ]; then
                sudo docker stop tcp-server || true
                sudo docker rm tcp-server || true
            fi

            # Run the new container
            sudo docker run -d --name tcp-server -p 80:8080 ${{ secrets.DOCKER_USERNAME }}/tcpserver:latest
          
